//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcTEST.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SpeedCourtConfigDbEntities : DbContext
    {
        public SpeedCourtConfigDbEntities()
            : base("name=SpeedCourtConfigDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tblCategory> tblCategories { get; set; }
        public DbSet<tblDictionary> tblDictionaries { get; set; }
        public DbSet<tblDocument> tblDocuments { get; set; }
        public DbSet<tblGame> tblGames { get; set; }
        public DbSet<tblGameDisplayObject> tblGameDisplayObjects { get; set; }
        public DbSet<tblGameEvent> tblGameEvents { get; set; }
        public DbSet<tblGameSensor> tblGameSensors { get; set; }
        public DbSet<tblLanguage> tblLanguages { get; set; }
        public DbSet<tblNew> tblNews { get; set; }
        public DbSet<tblResult> tblResults { get; set; }
        public DbSet<tblSchedule> tblSchedules { get; set; }
        public DbSet<tblSensorType> tblSensorTypes { get; set; }
        public DbSet<tblSpeedEntry> tblSpeedEntries { get; set; }
        public DbSet<tblSport> tblSports { get; set; }
        public DbSet<tblTemplate> tblTemplates { get; set; }
        public DbSet<tblTemplateSensor> tblTemplateSensors { get; set; }
        public DbSet<tblTerm> tblTerms { get; set; }
        public DbSet<tblTrainer> tblTrainers { get; set; }
        public DbSet<tblUser> tblUsers { get; set; }
        public DbSet<tblUserGroup> tblUserGroups { get; set; }
        public DbSet<vwDocument> vwDocuments { get; set; }
        public DbSet<vwGame> vwGames { get; set; }
        public DbSet<vwResult> vwResults { get; set; }
        public DbSet<vwResult_Part1> vwResult_Part1 { get; set; }
        public DbSet<vwResult_Part2> vwResult_Part2 { get; set; }
        public DbSet<vwResultGameHighscore> vwResultGameHighscores { get; set; }
        public DbSet<vwTemplate> vwTemplates { get; set; }
        public DbSet<vwTerm> vwTerms { get; set; }
        public DbSet<vwUser> vwUsers { get; set; }
        public DbSet<vwGameFull> vwGameFull { get; set; }
        public DbSet<tblStatsParameter> tblStatsParameters { get; set; }
        public DbSet<tblTemplate2> tblTemplate2 { get; set; }
        public DbSet<vwResult_Part01> vwResult_Part01 { get; set; }
        public DbSet<vwResult_Part02> vwResult_Part02 { get; set; }
        public DbSet<vwResultFull> vwResultFulls { get; set; }
        public DbSet<vwUserGroup> vwUserGroups { get; set; }
        public DbSet<vwGroupMember> vwGroupMembers { get; set; }
        public DbSet<tblReactionSignal> tblReactionSignals { get; set; }
        public DbSet<tblReactionType> tblReactionTypes { get; set; }
        public DbSet<tblMemoryType> tblMemoryTypes { get; set; }
    
        public virtual int delGameSensors(Nullable<int> iD_Game)
        {
            var iD_GameParameter = iD_Game.HasValue ?
                new ObjectParameter("ID_Game", iD_Game) :
                new ObjectParameter("ID_Game", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delGameSensors", iD_GameParameter);
        }
    
        public virtual ObjectResult<getCoaches_Result> getCoaches(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCoaches_Result>("getCoaches", userIDParameter);
        }
    
        public virtual ObjectResult<getCoachs_Result> getCoachs(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getCoachs_Result>("getCoachs", userIDParameter);
        }
    
        public virtual ObjectResult<getDatepickerDates_Result> getDatepickerDates(Nullable<int> gameID, Nullable<int> groupID, Nullable<int> userID, Nullable<System.DateTime> datum)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDatepickerDates_Result>("getDatepickerDates", gameIDParameter, groupIDParameter, userIDParameter, datumParameter);
        }
    
        public virtual int getDisplayObjectsHide(Nullable<int> gameStep, Nullable<int> iD_Game)
        {
            var gameStepParameter = gameStep.HasValue ?
                new ObjectParameter("GameStep", gameStep) :
                new ObjectParameter("GameStep", typeof(int));
    
            var iD_GameParameter = iD_Game.HasValue ?
                new ObjectParameter("ID_Game", iD_Game) :
                new ObjectParameter("ID_Game", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getDisplayObjectsHide", gameStepParameter, iD_GameParameter);
        }
    
        public virtual int getDisplayObjectsShow(Nullable<int> gameStep, Nullable<int> iD_Game)
        {
            var gameStepParameter = gameStep.HasValue ?
                new ObjectParameter("GameStep", gameStep) :
                new ObjectParameter("GameStep", typeof(int));
    
            var iD_GameParameter = iD_Game.HasValue ?
                new ObjectParameter("ID_Game", iD_Game) :
                new ObjectParameter("ID_Game", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getDisplayObjectsShow", gameStepParameter, iD_GameParameter);
        }
    
        public virtual ObjectResult<getGameByUser_Result> getGameByUser(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getGameByUser_Result>("getGameByUser", userIDParameter, searchParameter);
        }
    
        public virtual int getGameSensors(Nullable<int> iD_Game)
        {
            var iD_GameParameter = iD_Game.HasValue ?
                new ObjectParameter("ID_Game", iD_Game) :
                new ObjectParameter("ID_Game", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getGameSensors", iD_GameParameter);
        }
    
        public virtual int getGamesForTemplateID(Nullable<int> iD_Template)
        {
            var iD_TemplateParameter = iD_Template.HasValue ?
                new ObjectParameter("ID_Template", iD_Template) :
                new ObjectParameter("ID_Template", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getGamesForTemplateID", iD_TemplateParameter);
        }
    
        public virtual ObjectResult<getGroupByUser_Result> getGroupByUser(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getGroupByUser_Result>("getGroupByUser", userIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<getHighscores_Result> getHighscores(Nullable<int> gameID, Nullable<int> userID, Nullable<System.DateTime> datum)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHighscores_Result>("getHighscores", gameIDParameter, userIDParameter, datumParameter);
        }
    
        public virtual ObjectResult<getHighscoresTop5_Result> getHighscoresTop5(Nullable<int> groupeID, Nullable<int> userID, Nullable<System.DateTime> datum)
        {
            var groupeIDParameter = groupeID.HasValue ?
                new ObjectParameter("GroupeID", groupeID) :
                new ObjectParameter("GroupeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHighscoresTop5_Result>("getHighscoresTop5", groupeIDParameter, userIDParameter, datumParameter);
        }
    
        public virtual ObjectResult<getHighscoresTop5P1_Result> getHighscoresTop5P1(Nullable<int> groupeID, Nullable<int> userID, Nullable<System.DateTime> datum)
        {
            var groupeIDParameter = groupeID.HasValue ?
                new ObjectParameter("GroupeID", groupeID) :
                new ObjectParameter("GroupeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHighscoresTop5P1_Result>("getHighscoresTop5P1", groupeIDParameter, userIDParameter, datumParameter);
        }
    
        public virtual ObjectResult<getHighscoresTop5P2_Result> getHighscoresTop5P2(Nullable<int> groupeID, Nullable<int> userID, Nullable<System.DateTime> datum)
        {
            var groupeIDParameter = groupeID.HasValue ?
                new ObjectParameter("GroupeID", groupeID) :
                new ObjectParameter("GroupeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHighscoresTop5P2_Result>("getHighscoresTop5P2", groupeIDParameter, userIDParameter, datumParameter);
        }
    
        public virtual ObjectResult<getLast5Games_Result> getLast5Games(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getLast5Games_Result>("getLast5Games", userIDParameter);
        }
    
        public virtual int getMaxNumberTemplateID(Nullable<int> iD_Template)
        {
            var iD_TemplateParameter = iD_Template.HasValue ?
                new ObjectParameter("ID_Template", iD_Template) :
                new ObjectParameter("ID_Template", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getMaxNumberTemplateID", iD_TemplateParameter);
        }
    
        public virtual ObjectResult<string> getNameFromDictionary(string name, Nullable<int> userID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getNameFromDictionary", nameParameter, userIDParameter);
        }
    
        public virtual ObjectResult<getNews_Result> getNews(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getNews_Result>("getNews", userIDParameter);
        }
    
        public virtual ObjectResult<getPlayerByUser_Result> getPlayerByUser(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getPlayerByUser_Result>("getPlayerByUser", userIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<getResult_Part1_Result> getResult_Part1(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResult_Part1_Result>("getResult_Part1", userIDParameter);
        }
    
        public virtual ObjectResult<getResult_Part2_Result> getResult_Part2(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResult_Part2_Result>("getResult_Part2", userIDParameter);
        }
    
        public virtual ObjectResult<getResultGameByUser_Result> getResultGameByUser(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResultGameByUser_Result>("getResultGameByUser", userIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<getResultGroupByUser_Result> getResultGroupByUser(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResultGroupByUser_Result>("getResultGroupByUser", userIDParameter, searchParameter);
        }
    
        public virtual ObjectResult<getResultPlayerByUser_Result> getResultPlayerByUser(Nullable<int> userID, string search)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResultPlayerByUser_Result>("getResultPlayerByUser", userIDParameter, searchParameter);
        }
    
        public virtual int getTemplatesForGameID(Nullable<int> iD_Game)
        {
            var iD_GameParameter = iD_Game.HasValue ?
                new ObjectParameter("ID_Game", iD_Game) :
                new ObjectParameter("ID_Game", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getTemplatesForGameID", iD_GameParameter);
        }
    
        public virtual ObjectResult<getTerminInDay_Result> getTerminInDay(Nullable<System.DateTime> datum)
        {
            var datumParameter = datum.HasValue ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getTerminInDay_Result>("getTerminInDay", datumParameter);
        }
    
        public virtual ObjectResult<getUserProfil_Result> getUserProfil(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserProfil_Result>("getUserProfil", userIDParameter);
        }
    
        public virtual ObjectResult<getUsersInGroup_Result> getUsersInGroup(Nullable<int> groupID, Nullable<int> userID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUsersInGroup_Result>("getUsersInGroup", groupIDParameter, userIDParameter);
        }
    
        public virtual int setTemplate(Nullable<int> userID, string radiobutton)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setTemplate", userIDParameter, radiobuttonParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int usp_tblNews_Del(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblNews_Del", iDParameter);
        }
    
        public virtual int usp_tblNews_Get(Nullable<int> iD, ObjectParameter title, ObjectParameter content, ObjectParameter tSCR)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblNews_Get", iDParameter, title, content, tSCR);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_tblNews_Lst(Nullable<int> rowCount)
        {
            var rowCountParameter = rowCount.HasValue ?
                new ObjectParameter("RowCount", rowCount) :
                new ObjectParameter("RowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tblNews_Lst", rowCountParameter);
        }
    
        public virtual int usp_tblNews_New(ObjectParameter iD, string title, string content, Nullable<System.DateTime> tSCR)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tSCRParameter = tSCR.HasValue ?
                new ObjectParameter("TSCR", tSCR) :
                new ObjectParameter("TSCR", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblNews_New", iD, titleParameter, contentParameter, tSCRParameter);
        }
    
        public virtual int usp_tblNews_Upd(Nullable<int> iD, string title, string content, Nullable<System.DateTime> tSCR)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var tSCRParameter = tSCR.HasValue ?
                new ObjectParameter("TSCR", tSCR) :
                new ObjectParameter("TSCR", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblNews_Upd", iDParameter, titleParameter, contentParameter, tSCRParameter);
        }
    
        public virtual int usp_tblSpeedEntry_Get(Nullable<int> iD, ObjectParameter matID, ObjectParameter entryTime, ObjectParameter interval, ObjectParameter sensorTypeID, ObjectParameter instanceID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSpeedEntry_Get", iDParameter, matID, entryTime, interval, sensorTypeID, instanceID);
        }
    
        public virtual ObjectResult<usp_tblSpeedEntry_LstByInstance_Result> usp_tblSpeedEntry_LstByInstance(Nullable<int> instanceID)
        {
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblSpeedEntry_LstByInstance_Result>("usp_tblSpeedEntry_LstByInstance", instanceIDParameter);
        }
    
        public virtual int usp_tblSpeedEntry_New(ObjectParameter iD, Nullable<int> matID, Nullable<System.DateTime> entryTime, Nullable<int> interval, Nullable<int> sensorTypeID, Nullable<int> instanceID)
        {
            var matIDParameter = matID.HasValue ?
                new ObjectParameter("MatID", matID) :
                new ObjectParameter("MatID", typeof(int));
    
            var entryTimeParameter = entryTime.HasValue ?
                new ObjectParameter("EntryTime", entryTime) :
                new ObjectParameter("EntryTime", typeof(System.DateTime));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var sensorTypeIDParameter = sensorTypeID.HasValue ?
                new ObjectParameter("SensorTypeID", sensorTypeID) :
                new ObjectParameter("SensorTypeID", typeof(int));
    
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSpeedEntry_New", iD, matIDParameter, entryTimeParameter, intervalParameter, sensorTypeIDParameter, instanceIDParameter);
        }
    
        public virtual int usp_tblSpeedEntryFull_New(ObjectParameter iD, Nullable<int> matID, Nullable<System.DateTime> entryTime, Nullable<int> interval, Nullable<int> sensorTypeID, Nullable<int> instanceID, Nullable<int> userID, Nullable<int> gameID)
        {
            var matIDParameter = matID.HasValue ?
                new ObjectParameter("MatID", matID) :
                new ObjectParameter("MatID", typeof(int));
    
            var entryTimeParameter = entryTime.HasValue ?
                new ObjectParameter("EntryTime", entryTime) :
                new ObjectParameter("EntryTime", typeof(System.DateTime));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var sensorTypeIDParameter = sensorTypeID.HasValue ?
                new ObjectParameter("SensorTypeID", sensorTypeID) :
                new ObjectParameter("SensorTypeID", typeof(int));
    
            var instanceIDParameter = instanceID.HasValue ?
                new ObjectParameter("InstanceID", instanceID) :
                new ObjectParameter("InstanceID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSpeedEntryFull_New", iD, matIDParameter, entryTimeParameter, intervalParameter, sensorTypeIDParameter, instanceIDParameter, userIDParameter, gameIDParameter);
        }
    
        public virtual int usp_tblSport_Del(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSport_Del", iDParameter);
        }
    
        public virtual int usp_tblSport_Get(Nullable<int> iD, ObjectParameter name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSport_Get", iDParameter, name);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_tblSport_Lst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tblSport_Lst");
        }
    
        public virtual int usp_tblSport_New(ObjectParameter iD, string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSport_New", iD, nameParameter);
        }
    
        public virtual int usp_tblSport_Upd(Nullable<int> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblSport_Upd", iDParameter, nameParameter);
        }
    
        public virtual int usp_tblTerm_Del(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblTerm_Del", iDParameter);
        }
    
        public virtual int usp_tblTerm_Get(Nullable<int> iD, ObjectParameter userID, ObjectParameter title, ObjectParameter note, ObjectParameter dateStart, ObjectParameter dateEnd)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblTerm_Get", iDParameter, userID, title, note, dateStart, dateEnd);
        }
    
        public virtual ObjectResult<Nullable<int>> usp_tblTerm_Lst(Nullable<System.DateTime> day)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_tblTerm_Lst", dayParameter);
        }
    
        public virtual int usp_tblTerm_New(ObjectParameter iD, Nullable<int> userID, string title, string note, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblTerm_New", iD, userIDParameter, titleParameter, noteParameter, dateStartParameter, dateEndParameter);
        }
    
        public virtual int usp_tblTerm_Upd(Nullable<int> iD, Nullable<int> userID, string title, string note, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblTerm_Upd", iDParameter, userIDParameter, titleParameter, noteParameter, dateStartParameter, dateEndParameter);
        }
    
        public virtual int usp_tblUser_Del(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUser_Del", iDParameter);
        }
    
        public virtual int usp_tblUser_Get(Nullable<int> iD, ObjectParameter username, ObjectParameter password, ObjectParameter pIN, ObjectParameter isTrainer, ObjectParameter name, ObjectParameter surname, ObjectParameter birthday, ObjectParameter weight, ObjectParameter height, ObjectParameter rFID, ObjectParameter lastLogin, ObjectParameter address, ObjectParameter city, ObjectParameter zIP, ObjectParameter email, ObjectParameter phone, ObjectParameter mobile, ObjectParameter userGroupID, ObjectParameter sportID, ObjectParameter hasPicture, ObjectParameter notes)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUser_Get", iDParameter, username, password, pIN, isTrainer, name, surname, birthday, weight, height, rFID, lastLogin, address, city, zIP, email, phone, mobile, userGroupID, sportID, hasPicture, notes);
        }
    
        public virtual int usp_tblUser_Lst(string name, string surname, string address, string city, string zIP, Nullable<int> userGroupID, Nullable<long> pIN, Nullable<bool> isTrainer, Nullable<long> rFID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(long));
    
            var isTrainerParameter = isTrainer.HasValue ?
                new ObjectParameter("IsTrainer", isTrainer) :
                new ObjectParameter("IsTrainer", typeof(bool));
    
            var rFIDParameter = rFID.HasValue ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUser_Lst", nameParameter, surnameParameter, addressParameter, cityParameter, zIPParameter, userGroupIDParameter, pINParameter, isTrainerParameter, rFIDParameter);
        }
    
        public virtual int usp_tblUser_LstPaged(string name, string surname, string address, string city, string zIP, Nullable<int> userGroupID, ObjectParameter countAll, Nullable<int> pageSize, Nullable<int> pageIndex, string sort, string dir)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var dirParameter = dir != null ?
                new ObjectParameter("Dir", dir) :
                new ObjectParameter("Dir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUser_LstPaged", nameParameter, surnameParameter, addressParameter, cityParameter, zIPParameter, userGroupIDParameter, countAll, pageSizeParameter, pageIndexParameter, sortParameter, dirParameter);
        }
    
        public virtual int usp_tblUser_New(ObjectParameter iD, string username, string password, Nullable<int> pIN, Nullable<bool> isTrainer, string name, string surname, Nullable<System.DateTime> birthday, Nullable<decimal> weight, Nullable<int> height, Nullable<long> rFID, Nullable<System.DateTime> lastLogin, string address, string city, string zIP, string email, string phone, string mobile, Nullable<int> userGroupID, Nullable<int> sportID, Nullable<bool> hasPicture, string notes)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(int));
    
            var isTrainerParameter = isTrainer.HasValue ?
                new ObjectParameter("IsTrainer", isTrainer) :
                new ObjectParameter("IsTrainer", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var rFIDParameter = rFID.HasValue ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(long));
    
            var lastLoginParameter = lastLogin.HasValue ?
                new ObjectParameter("LastLogin", lastLogin) :
                new ObjectParameter("LastLogin", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var hasPictureParameter = hasPicture.HasValue ?
                new ObjectParameter("HasPicture", hasPicture) :
                new ObjectParameter("HasPicture", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUser_New", iD, usernameParameter, passwordParameter, pINParameter, isTrainerParameter, nameParameter, surnameParameter, birthdayParameter, weightParameter, heightParameter, rFIDParameter, lastLoginParameter, addressParameter, cityParameter, zIPParameter, emailParameter, phoneParameter, mobileParameter, userGroupIDParameter, sportIDParameter, hasPictureParameter, notesParameter);
        }
    
        public virtual int usp_tblUser_Upd(Nullable<int> iD, string username, string password, Nullable<int> pIN, Nullable<bool> isTrainer, string name, string surname, Nullable<System.DateTime> birthday, Nullable<decimal> weight, Nullable<int> height, Nullable<long> rFID, Nullable<System.DateTime> lastLogin, string address, string city, string zIP, string email, string phone, string mobile, Nullable<int> userGroupID, Nullable<int> sportID, Nullable<bool> hasPicture, string notes)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var pINParameter = pIN.HasValue ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(int));
    
            var isTrainerParameter = isTrainer.HasValue ?
                new ObjectParameter("IsTrainer", isTrainer) :
                new ObjectParameter("IsTrainer", typeof(bool));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var birthdayParameter = birthday.HasValue ?
                new ObjectParameter("Birthday", birthday) :
                new ObjectParameter("Birthday", typeof(System.DateTime));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(int));
    
            var rFIDParameter = rFID.HasValue ?
                new ObjectParameter("RFID", rFID) :
                new ObjectParameter("RFID", typeof(long));
    
            var lastLoginParameter = lastLogin.HasValue ?
                new ObjectParameter("LastLogin", lastLogin) :
                new ObjectParameter("LastLogin", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPParameter = zIP != null ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("UserGroupID", userGroupID) :
                new ObjectParameter("UserGroupID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var hasPictureParameter = hasPicture.HasValue ?
                new ObjectParameter("HasPicture", hasPicture) :
                new ObjectParameter("HasPicture", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUser_Upd", iDParameter, usernameParameter, passwordParameter, pINParameter, isTrainerParameter, nameParameter, surnameParameter, birthdayParameter, weightParameter, heightParameter, rFIDParameter, lastLoginParameter, addressParameter, cityParameter, zIPParameter, emailParameter, phoneParameter, mobileParameter, userGroupIDParameter, sportIDParameter, hasPictureParameter, notesParameter);
        }
    
        public virtual int usp_tblUserGroup_Del(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUserGroup_Del", iDParameter);
        }
    
        public virtual int usp_tblUserGroup_Get(Nullable<int> iD, ObjectParameter name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUserGroup_Get", iDParameter, name);
        }
    
        public virtual ObjectResult<usp_tblUserGroup_Lst_Result> usp_tblUserGroup_Lst(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblUserGroup_Lst_Result>("usp_tblUserGroup_Lst", nameParameter);
        }
    
        public virtual ObjectResult<usp_tblUserGroup_LstPaged_Result> usp_tblUserGroup_LstPaged(string name, ObjectParameter countAll, Nullable<int> pageSize, Nullable<int> pageIndex, string sort, string dir)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortParameter = sort != null ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(string));
    
            var dirParameter = dir != null ?
                new ObjectParameter("Dir", dir) :
                new ObjectParameter("Dir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_tblUserGroup_LstPaged_Result>("usp_tblUserGroup_LstPaged", nameParameter, countAll, pageSizeParameter, pageIndexParameter, sortParameter, dirParameter);
        }
    
        public virtual int usp_tblUserGroup_New(ObjectParameter iD, string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUserGroup_New", iD, nameParameter);
        }
    
        public virtual int usp_tblUserGroup_Upd(Nullable<int> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_tblUserGroup_Upd", iDParameter, nameParameter);
        }
    
        public virtual int setRandomField(Nullable<int> gameID, string field)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setRandomField", gameIDParameter, fieldParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> setGameSaveAs(Nullable<int> gameID, string name, ObjectParameter gameID_new)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("setGameSaveAs", gameIDParameter, nameParameter, gameID_new);
        }
    
        public virtual ObjectResult<Nullable<decimal>> setGameSaveAsNew(Nullable<int> gameID, string name)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("setGameSaveAsNew", gameIDParameter, nameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> setSaveAs(string name, Nullable<bool> isRandom, Nullable<int> randomValue, Nullable<short> randomType, Nullable<bool> isTimeLimit, Nullable<int> timeLimit, string description, string objectives, string definition, Nullable<int> numShownFields, Nullable<int> numRepetition, string randomFields, Nullable<bool> quickGamePool, Nullable<int> categoryID, Nullable<System.TimeSpan> minStayTime, Nullable<System.TimeSpan> maxStayTime, Nullable<System.TimeSpan> minFlyTime, Nullable<System.TimeSpan> maxFlyTime, Nullable<int> startField, Nullable<int> countdown, Nullable<bool> legLeft, Nullable<bool> legRight)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isRandomParameter = isRandom.HasValue ?
                new ObjectParameter("IsRandom", isRandom) :
                new ObjectParameter("IsRandom", typeof(bool));
    
            var randomValueParameter = randomValue.HasValue ?
                new ObjectParameter("RandomValue", randomValue) :
                new ObjectParameter("RandomValue", typeof(int));
    
            var randomTypeParameter = randomType.HasValue ?
                new ObjectParameter("RandomType", randomType) :
                new ObjectParameter("RandomType", typeof(short));
    
            var isTimeLimitParameter = isTimeLimit.HasValue ?
                new ObjectParameter("IsTimeLimit", isTimeLimit) :
                new ObjectParameter("IsTimeLimit", typeof(bool));
    
            var timeLimitParameter = timeLimit.HasValue ?
                new ObjectParameter("TimeLimit", timeLimit) :
                new ObjectParameter("TimeLimit", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var objectivesParameter = objectives != null ?
                new ObjectParameter("Objectives", objectives) :
                new ObjectParameter("Objectives", typeof(string));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("Definition", definition) :
                new ObjectParameter("Definition", typeof(string));
    
            var numShownFieldsParameter = numShownFields.HasValue ?
                new ObjectParameter("NumShownFields", numShownFields) :
                new ObjectParameter("NumShownFields", typeof(int));
    
            var numRepetitionParameter = numRepetition.HasValue ?
                new ObjectParameter("NumRepetition", numRepetition) :
                new ObjectParameter("NumRepetition", typeof(int));
    
            var randomFieldsParameter = randomFields != null ?
                new ObjectParameter("RandomFields", randomFields) :
                new ObjectParameter("RandomFields", typeof(string));
    
            var quickGamePoolParameter = quickGamePool.HasValue ?
                new ObjectParameter("QuickGamePool", quickGamePool) :
                new ObjectParameter("QuickGamePool", typeof(bool));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var minStayTimeParameter = minStayTime.HasValue ?
                new ObjectParameter("MinStayTime", minStayTime) :
                new ObjectParameter("MinStayTime", typeof(System.TimeSpan));
    
            var maxStayTimeParameter = maxStayTime.HasValue ?
                new ObjectParameter("MaxStayTime", maxStayTime) :
                new ObjectParameter("MaxStayTime", typeof(System.TimeSpan));
    
            var minFlyTimeParameter = minFlyTime.HasValue ?
                new ObjectParameter("MinFlyTime", minFlyTime) :
                new ObjectParameter("MinFlyTime", typeof(System.TimeSpan));
    
            var maxFlyTimeParameter = maxFlyTime.HasValue ?
                new ObjectParameter("MaxFlyTime", maxFlyTime) :
                new ObjectParameter("MaxFlyTime", typeof(System.TimeSpan));
    
            var startFieldParameter = startField.HasValue ?
                new ObjectParameter("StartField", startField) :
                new ObjectParameter("StartField", typeof(int));
    
            var countdownParameter = countdown.HasValue ?
                new ObjectParameter("Countdown", countdown) :
                new ObjectParameter("Countdown", typeof(int));
    
            var legLeftParameter = legLeft.HasValue ?
                new ObjectParameter("LegLeft", legLeft) :
                new ObjectParameter("LegLeft", typeof(bool));
    
            var legRightParameter = legRight.HasValue ?
                new ObjectParameter("LegRight", legRight) :
                new ObjectParameter("LegRight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("setSaveAs", nameParameter, isRandomParameter, randomValueParameter, randomTypeParameter, isTimeLimitParameter, timeLimitParameter, descriptionParameter, objectivesParameter, definitionParameter, numShownFieldsParameter, numRepetitionParameter, randomFieldsParameter, quickGamePoolParameter, categoryIDParameter, minStayTimeParameter, maxStayTimeParameter, minFlyTimeParameter, maxFlyTimeParameter, startFieldParameter, countdownParameter, legLeftParameter, legRightParameter);
        }
    
        public virtual int setFieldsNumber(Nullable<int> userID, Nullable<int> broj)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var brojParameter = broj.HasValue ?
                new ObjectParameter("broj", broj) :
                new ObjectParameter("broj", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setFieldsNumber", userIDParameter, brojParameter);
        }
    
        public virtual int setMiddleFields(Nullable<int> userID, string radiobutton, Nullable<int> gameID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setMiddleFields", userIDParameter, radiobuttonParameter, gameIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> setSaveAss(string name, Nullable<bool> isRandom, Nullable<int> randomValue, Nullable<short> randomType, Nullable<bool> isTimeLimit, Nullable<int> timeLimit, string description, string objectives, string definition, Nullable<int> numShownFields, Nullable<int> numRepetition, string randomFields, Nullable<bool> quickGamePool, Nullable<int> categoryID, Nullable<System.TimeSpan> minStayTime, Nullable<System.TimeSpan> maxStayTime, Nullable<System.TimeSpan> minFlyTime, Nullable<System.TimeSpan> maxFlyTime, Nullable<int> startField, Nullable<int> countdown, Nullable<bool> legLeft, Nullable<bool> legRight, Nullable<int> quantity, Nullable<int> distance)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isRandomParameter = isRandom.HasValue ?
                new ObjectParameter("IsRandom", isRandom) :
                new ObjectParameter("IsRandom", typeof(bool));
    
            var randomValueParameter = randomValue.HasValue ?
                new ObjectParameter("RandomValue", randomValue) :
                new ObjectParameter("RandomValue", typeof(int));
    
            var randomTypeParameter = randomType.HasValue ?
                new ObjectParameter("RandomType", randomType) :
                new ObjectParameter("RandomType", typeof(short));
    
            var isTimeLimitParameter = isTimeLimit.HasValue ?
                new ObjectParameter("IsTimeLimit", isTimeLimit) :
                new ObjectParameter("IsTimeLimit", typeof(bool));
    
            var timeLimitParameter = timeLimit.HasValue ?
                new ObjectParameter("TimeLimit", timeLimit) :
                new ObjectParameter("TimeLimit", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var objectivesParameter = objectives != null ?
                new ObjectParameter("Objectives", objectives) :
                new ObjectParameter("Objectives", typeof(string));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("Definition", definition) :
                new ObjectParameter("Definition", typeof(string));
    
            var numShownFieldsParameter = numShownFields.HasValue ?
                new ObjectParameter("NumShownFields", numShownFields) :
                new ObjectParameter("NumShownFields", typeof(int));
    
            var numRepetitionParameter = numRepetition.HasValue ?
                new ObjectParameter("NumRepetition", numRepetition) :
                new ObjectParameter("NumRepetition", typeof(int));
    
            var randomFieldsParameter = randomFields != null ?
                new ObjectParameter("RandomFields", randomFields) :
                new ObjectParameter("RandomFields", typeof(string));
    
            var quickGamePoolParameter = quickGamePool.HasValue ?
                new ObjectParameter("QuickGamePool", quickGamePool) :
                new ObjectParameter("QuickGamePool", typeof(bool));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var minStayTimeParameter = minStayTime.HasValue ?
                new ObjectParameter("MinStayTime", minStayTime) :
                new ObjectParameter("MinStayTime", typeof(System.TimeSpan));
    
            var maxStayTimeParameter = maxStayTime.HasValue ?
                new ObjectParameter("MaxStayTime", maxStayTime) :
                new ObjectParameter("MaxStayTime", typeof(System.TimeSpan));
    
            var minFlyTimeParameter = minFlyTime.HasValue ?
                new ObjectParameter("MinFlyTime", minFlyTime) :
                new ObjectParameter("MinFlyTime", typeof(System.TimeSpan));
    
            var maxFlyTimeParameter = maxFlyTime.HasValue ?
                new ObjectParameter("MaxFlyTime", maxFlyTime) :
                new ObjectParameter("MaxFlyTime", typeof(System.TimeSpan));
    
            var startFieldParameter = startField.HasValue ?
                new ObjectParameter("StartField", startField) :
                new ObjectParameter("StartField", typeof(int));
    
            var countdownParameter = countdown.HasValue ?
                new ObjectParameter("Countdown", countdown) :
                new ObjectParameter("Countdown", typeof(int));
    
            var legLeftParameter = legLeft.HasValue ?
                new ObjectParameter("LegLeft", legLeft) :
                new ObjectParameter("LegLeft", typeof(bool));
    
            var legRightParameter = legRight.HasValue ?
                new ObjectParameter("LegRight", legRight) :
                new ObjectParameter("LegRight", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("setSaveAss", nameParameter, isRandomParameter, randomValueParameter, randomTypeParameter, isTimeLimitParameter, timeLimitParameter, descriptionParameter, objectivesParameter, definitionParameter, numShownFieldsParameter, numRepetitionParameter, randomFieldsParameter, quickGamePoolParameter, categoryIDParameter, minStayTimeParameter, maxStayTimeParameter, minFlyTimeParameter, maxFlyTimeParameter, startFieldParameter, countdownParameter, legLeftParameter, legRightParameter, quantityParameter, distanceParameter);
        }
    
        public virtual int setStartField(Nullable<int> userID, string radiobutton, Nullable<int> gameID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setStartField", userIDParameter, radiobuttonParameter, gameIDParameter);
        }
    
        public virtual int setLanguage(Nullable<int> userID, string radiobutton)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setLanguage", userIDParameter, radiobuttonParameter);
        }
    
        public virtual ObjectResult<string> getFieldMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getFieldMap");
        }
    
        public virtual int getMap(Nullable<int> gameID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getMap", gameIDParameter);
        }
    
        public virtual int setCourtID(Nullable<int> field)
        {
            var fieldParameter = field.HasValue ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setCourtID", fieldParameter);
        }
    
        public virtual int setFieldName(string broj, string ime)
        {
            var brojParameter = broj != null ?
                new ObjectParameter("broj", broj) :
                new ObjectParameter("broj", typeof(string));
    
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setFieldName", brojParameter, imeParameter);
        }
    
        public virtual int setFormOfStartField(Nullable<int> userID, string radiobutton)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setFormOfStartField", userIDParameter, radiobuttonParameter);
        }
    
        public virtual int setFieldNo(Nullable<int> fieldno)
        {
            var fieldnoParameter = fieldno.HasValue ?
                new ObjectParameter("fieldno", fieldno) :
                new ObjectParameter("fieldno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setFieldNo", fieldnoParameter);
        }
    
        public virtual int setSpeedTeren()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setSpeedTeren");
        }
    
        public virtual int setPhotochellID(Nullable<int> field)
        {
            var fieldParameter = field.HasValue ?
                new ObjectParameter("field", field) :
                new ObjectParameter("field", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setPhotochellID", fieldParameter);
        }
    
        public virtual int setStartEndField(Nullable<int> userID, string radiobutton, Nullable<int> startend)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            var startendParameter = startend.HasValue ?
                new ObjectParameter("startend", startend) :
                new ObjectParameter("startend", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setStartEndField", userIDParameter, radiobuttonParameter, startendParameter);
        }
    
        public virtual int setFieldDistance(string broj, string distanca)
        {
            var brojParameter = broj != null ?
                new ObjectParameter("broj", broj) :
                new ObjectParameter("broj", typeof(string));
    
            var distancaParameter = distanca != null ?
                new ObjectParameter("distanca", distanca) :
                new ObjectParameter("distanca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setFieldDistance", brojParameter, distancaParameter);
        }
    
        public virtual int setClearPhotochellPositionY()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setClearPhotochellPositionY");
        }
    
        public virtual int setPositionXY(string broj, Nullable<int> x, Nullable<int> y)
        {
            var brojParameter = broj != null ?
                new ObjectParameter("broj", broj) :
                new ObjectParameter("broj", typeof(string));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(int));
    
            var yParameter = y.HasValue ?
                new ObjectParameter("y", y) :
                new ObjectParameter("y", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setPositionXY", brojParameter, xParameter, yParameter);
        }
    
        public virtual int setStatsParameter(string radiobutton, Nullable<int> userID)
        {
            var radiobuttonParameter = radiobutton != null ?
                new ObjectParameter("radiobutton", radiobutton) :
                new ObjectParameter("radiobutton", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setStatsParameter", radiobuttonParameter, userIDParameter);
        }
    
        public virtual ObjectResult<getStatsParameter_Result> getStatsParameter(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStatsParameter_Result>("getStatsParameter", userIDParameter);
        }
    
        public virtual ObjectResult<getHighscoresAll_Result> getHighscoresAll(Nullable<int> gameID, Nullable<int> userID, Nullable<System.DateTime> datum)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getHighscoresAll_Result>("getHighscoresAll", gameIDParameter, userIDParameter, datumParameter);
        }
    
        public virtual ObjectResult<getResult_Part02_Result> getResult_Part02(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getResult_Part02_Result>("getResult_Part02", userIDParameter);
        }
    
        public virtual ObjectResult<getUserGroup_Result> getUserGroup(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserGroup_Result>("getUserGroup", userIDParameter);
        }
    
        public virtual int setQuickstart(string id, Nullable<int> userID)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setQuickstart", idParameter, userIDParameter);
        }
    
        public virtual ObjectResult<getGroupMembers_Result> getGroupMembers(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getGroupMembers_Result>("getGroupMembers", groupIDParameter);
        }
    
        public virtual int delGame(Nullable<int> gameID, Nullable<int> userID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("gameID", gameID) :
                new ObjectParameter("gameID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delGame", gameIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> setSaveAs3(string name, Nullable<bool> isRandom, Nullable<int> randomValue, Nullable<short> randomType, Nullable<bool> isTimeLimit, Nullable<int> timeLimit, string description, string objectives, string definition, Nullable<int> numShownFields, Nullable<int> numRepetition, string randomFields, Nullable<bool> quickGamePool, Nullable<int> categoryID, Nullable<System.TimeSpan> minStayTime, Nullable<System.TimeSpan> maxStayTime, Nullable<System.TimeSpan> minFlyTime, Nullable<System.TimeSpan> maxFlyTime, Nullable<int> startField, Nullable<int> countdown, Nullable<bool> legLeft, Nullable<bool> legRight, Nullable<int> quantity, Nullable<int> distance, Nullable<int> reactionSignalID, Nullable<int> reaction, Nullable<System.TimeSpan> reactionTime, Nullable<int> reactionTypeID, Nullable<int> memoryTypeID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isRandomParameter = isRandom.HasValue ?
                new ObjectParameter("IsRandom", isRandom) :
                new ObjectParameter("IsRandom", typeof(bool));
    
            var randomValueParameter = randomValue.HasValue ?
                new ObjectParameter("RandomValue", randomValue) :
                new ObjectParameter("RandomValue", typeof(int));
    
            var randomTypeParameter = randomType.HasValue ?
                new ObjectParameter("RandomType", randomType) :
                new ObjectParameter("RandomType", typeof(short));
    
            var isTimeLimitParameter = isTimeLimit.HasValue ?
                new ObjectParameter("IsTimeLimit", isTimeLimit) :
                new ObjectParameter("IsTimeLimit", typeof(bool));
    
            var timeLimitParameter = timeLimit.HasValue ?
                new ObjectParameter("TimeLimit", timeLimit) :
                new ObjectParameter("TimeLimit", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var objectivesParameter = objectives != null ?
                new ObjectParameter("Objectives", objectives) :
                new ObjectParameter("Objectives", typeof(string));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("Definition", definition) :
                new ObjectParameter("Definition", typeof(string));
    
            var numShownFieldsParameter = numShownFields.HasValue ?
                new ObjectParameter("NumShownFields", numShownFields) :
                new ObjectParameter("NumShownFields", typeof(int));
    
            var numRepetitionParameter = numRepetition.HasValue ?
                new ObjectParameter("NumRepetition", numRepetition) :
                new ObjectParameter("NumRepetition", typeof(int));
    
            var randomFieldsParameter = randomFields != null ?
                new ObjectParameter("RandomFields", randomFields) :
                new ObjectParameter("RandomFields", typeof(string));
    
            var quickGamePoolParameter = quickGamePool.HasValue ?
                new ObjectParameter("QuickGamePool", quickGamePool) :
                new ObjectParameter("QuickGamePool", typeof(bool));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var minStayTimeParameter = minStayTime.HasValue ?
                new ObjectParameter("MinStayTime", minStayTime) :
                new ObjectParameter("MinStayTime", typeof(System.TimeSpan));
    
            var maxStayTimeParameter = maxStayTime.HasValue ?
                new ObjectParameter("MaxStayTime", maxStayTime) :
                new ObjectParameter("MaxStayTime", typeof(System.TimeSpan));
    
            var minFlyTimeParameter = minFlyTime.HasValue ?
                new ObjectParameter("MinFlyTime", minFlyTime) :
                new ObjectParameter("MinFlyTime", typeof(System.TimeSpan));
    
            var maxFlyTimeParameter = maxFlyTime.HasValue ?
                new ObjectParameter("MaxFlyTime", maxFlyTime) :
                new ObjectParameter("MaxFlyTime", typeof(System.TimeSpan));
    
            var startFieldParameter = startField.HasValue ?
                new ObjectParameter("StartField", startField) :
                new ObjectParameter("StartField", typeof(int));
    
            var countdownParameter = countdown.HasValue ?
                new ObjectParameter("Countdown", countdown) :
                new ObjectParameter("Countdown", typeof(int));
    
            var legLeftParameter = legLeft.HasValue ?
                new ObjectParameter("LegLeft", legLeft) :
                new ObjectParameter("LegLeft", typeof(bool));
    
            var legRightParameter = legRight.HasValue ?
                new ObjectParameter("LegRight", legRight) :
                new ObjectParameter("LegRight", typeof(bool));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            var reactionSignalIDParameter = reactionSignalID.HasValue ?
                new ObjectParameter("ReactionSignalID", reactionSignalID) :
                new ObjectParameter("ReactionSignalID", typeof(int));
    
            var reactionParameter = reaction.HasValue ?
                new ObjectParameter("Reaction", reaction) :
                new ObjectParameter("Reaction", typeof(int));
    
            var reactionTimeParameter = reactionTime.HasValue ?
                new ObjectParameter("ReactionTime", reactionTime) :
                new ObjectParameter("ReactionTime", typeof(System.TimeSpan));
    
            var reactionTypeIDParameter = reactionTypeID.HasValue ?
                new ObjectParameter("ReactionTypeID", reactionTypeID) :
                new ObjectParameter("ReactionTypeID", typeof(int));
    
            var memoryTypeIDParameter = memoryTypeID.HasValue ?
                new ObjectParameter("MemoryTypeID", memoryTypeID) :
                new ObjectParameter("MemoryTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("setSaveAs3", nameParameter, isRandomParameter, randomValueParameter, randomTypeParameter, isTimeLimitParameter, timeLimitParameter, descriptionParameter, objectivesParameter, definitionParameter, numShownFieldsParameter, numRepetitionParameter, randomFieldsParameter, quickGamePoolParameter, categoryIDParameter, minStayTimeParameter, maxStayTimeParameter, minFlyTimeParameter, maxFlyTimeParameter, startFieldParameter, countdownParameter, legLeftParameter, legRightParameter, quantityParameter, distanceParameter, reactionSignalIDParameter, reactionParameter, reactionTimeParameter, reactionTypeIDParameter, memoryTypeIDParameter);
        }
    }
}
